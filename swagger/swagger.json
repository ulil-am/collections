{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "basePath": "/collections/v1",
    "paths": {
        "/generate/loan-app-id": {
            "post": {
                "tags": [
                    "generate"
                ],
                "description": "create Generate",
                "operationId": "GenerateController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Generate content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Generate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Generate"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/products/": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "get Products",
                "operationId": "ProductsController.GetProductList",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Products"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "products"
                ],
                "description": "create Products",
                "operationId": "ProductsController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Products content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Products"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Products"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "tags": [
                    "products"
                ],
                "description": "get Products by id",
                "operationId": "ProductsController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Products"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "products"
                ],
                "description": "update the Products",
                "operationId": "ProductsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Products content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Products"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Products"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "products"
                ],
                "description": "delete the Products",
                "operationId": "ProductsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        ".Generate": {
            "type": "object"
        },
        ".Products": {
            "type": "object"
        }
    },
    "tags": [
        {
            "name": "generate",
            "description": "GenerateController operations for Generate\n"
        },
        {
            "name": "products",
            "description": "ProductsController operations for Products\n"
        }
    ]
}